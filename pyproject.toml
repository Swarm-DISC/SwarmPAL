[build-system]
requires = ["flit_core >=3.4"]
build-backend = "flit_core.buildapi"


[project]
name = "swarmpal"
authors = [
    { name = "Ashley Smith", email = "ashley.smith@ed.ac.uk" },
]
maintainers = [
    { name = "Ashley Smith", email = "ashley.smith@ed.ac.uk" },
]
license = { file = "LICENSE" }

description = "Toolbox for ESA's Swarm mission"
readme = "README.md"

requires-python = ">=3.10"

classifiers = [
    "License :: OSI Approved :: MIT License",
    "Topic :: Scientific/Engineering",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Development Status :: 4 - Beta",
]

dynamic = ["version"]

dependencies = [
    "cartopy >= 0.22",
    "click >= 8.1",
    "hapiclient >= 0.2.3",
    "ipython",
    "ipywidgets",
    "numpy >= 2.0.0",
    "matplotlib >= 3.5",
    "pyyaml >= 6.0.0",
    "scipy >= 1.8",
    "viresclient >= 0.11",
    "xarray >= 2024.10.0",
]

[project.optional-dependencies]
dsecs = [
    "apexpy>=2.1.0",
    "pyproj>=3",
]
test = [
    "pytest >=6",
    "pooch",
]
dev = [
    "pytest >=6",
    "nox >=2022",
    "pre-commit",
    "pooch",
]
docs = [
    "Sphinx==7.2",
    "myst-nb==1.0",
    "sphinx-book-theme==1.1",
    "sphinx_click==5.0",
    "sphinx_copybutton==0.5",
    "matplotlib==3.9",
    "ipywidgets==8.0",
    "ipython!=8.7.0",
]

[project.scripts]
swarmpal = "swarmpal.cli.commands:cli"

[project.urls]
homepage = "https://github.com/Swarm-DISC/SwarmPAL"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
    "error",
    # Temporary measures which should be fixed
    "ignore:unclosed <ssl.SSLSocket:ResourceWarning",
    # Ignore warnings raised by apexpy (temporarily?)
    "ignore::RuntimeWarning",
    "ignore::UserWarning",
    # Ignore warning from pandas
    "ignore:(\nPyarrow will become a required dependency of pandas):DeprecationWarning",
]
testpaths = [
    "tests",
]
markers = [
    "remote",
    "dsecs",
    "cached",
]

[tool.pycln]
all = true


[tool.mypy]
files = "src"
python_version = "3.8"
warn_unused_configs = true
ignore_missing_imports = true

check_untyped_defs = true
# disallow_incomplete_defs = true
# disallow_any_generics = true
# disallow_subclassing_any = true
# disallow_untyped_calls = true
# disallow_untyped_defs = true
# disallow_untyped_decorators = true
# no_implicit_optional = true
# warn_redundant_casts = true
# warn_unused_ignores = true
# warn_return_any = true
# no_implicit_reexport = true
# strict_equality = true

[tool.isort]
profile = "black"

[tool.ruff]
src = ["src"]

[tool.ruff.lint]
# TODO: Re-enable those commented out
extend-select = [
#   "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
#   "C4",       # flake8-comprehensions
#   "EM",       # flake8-errmsg
#   "ICN",      # flake8-import-conventions
#   "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
#   "PTH",      # flake8-use-pathlib
#   "RET",      # flake8-return
  "RUF",      # Ruff-specific
#   "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "FURB",     # refurb
  "PYI",      # flake8-pyi
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  # TODO: Check if we can re-enable these:
  "PLW0127",
  "PLR1714",
]
typing-modules = ["mypackage._compat.typing"]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]
